Day 1.

Mostly done setup and projecting.
Manage to do first class and test it.

Day 2. 

Added multiple classes for reels of the game, tested,
then added ticker and tested positioning. 
After that I could start animating spinning of reel.

Day 3. 

Implemented spinning and stopping of reels, to do that I used
TweenMax, had to setup and add mask as well. After that added drop anim
and few indicators for spin state, so I could test it. 

Day 4.

First half was for constats because I had a lot of hardcoded values from testing
Second is dedicated to ui: projecting, creating and adding functionalities 
like ui container, class, balance text, bet, spin buttons and corresponding methods.
Added guards for unsufficient funds.

Day 5.

Dedicated to loading symbols/assets. 
Problem with import and with PIXI.Assets took a big chunk of time. 
Second problem with loader and time, got regulated 
by adding loader.loaded in right place.

Day 6. 

After having ui and spin, worked on connecting them.
Then started working on getting payouts from screen.
Added background images to game and to ui
Created get screen array (and helper func invert screen)

Day 7.

Continued work on payout and win. 
After that, made win presentation to show when win is on screen.
Connected win, popup win and spin.
Issues on presenting win after spin is stopped so had to investigate,
tried a few solutions: ticker, indicators, timeouts.  

Day 8.

Dedicated to changing the reels and screen on spin.
Destroy had problems when adding back Obj to container, so for now 
I did it as texture and id change.
Then I had completed part of what I wanted from simple game, besides 
smallwork, so next was time for redux.

Day 9.

Lightwork today because lack of time. 
Mostly force screen to trigger the win on every fourth spin.
Enountered issues when forcing full line win, 
investigated and fixed that. 
Finished by adding payout and calc for scatter as it's different
symbols than the rest.

Day 10.

After finding out correct redux script tags, started importing store in ui.
Replaced betAmount balanceAmount to take values from store, subbed store and did code cleanup.
After that started importing store in reels and main to get the state of the game running.
Replaced available indicators with stateGame from redux and then started working 
on bunch of bugs that it created.

Day 11.

Looking for a way to dispatch as few times as possible, also trying to reduce call of
stopSpin, startDrop functions only once because they consist of tweens and they are not
compatible with ticker/update. 
Then subscribed winAnim to redux to get present win state, encountered error when dispatched
updateBalance in that sub/state and went to inf loop. Took a lot of time to fix that one.
While refactoring ui, notices repeatability, and made class for text and buttons.

Day 12. 

Just working on fixing reel spin and stop spin state, and removing visible bugs.
Had three fixes to find solution to.
  
Day 13.

Finishing touches and code cleanup/refactor/documentation. Ensuring to 
provide as much information as possible. 
Upped ticker and update functions from reel to reels so i don't have multiple tickers 
in game, but just one unique. Refactored it's functions and cleaned classes.
Git upload and then going through code one more time to see if anything's left.

After getting feedback:

Day 14. 15. 16.

Spent configuring webpack of project. After configuring webpack had a problem with hot reload.
After all those issues were resolved, removed all files and folders in src.
Then once again reckeched all imports and changed from script tag import to ES6 imports.
After imports were done, first thing was to change loading of assets from pixi loader 
to Pixi Assets. 

Day 17.

Took spin start and stop functions and made them with tween instead of using current update.
Added indicators/guards to ensure it calls tweens from update only once.
Further refactor of code. 



-- TODO:
• 2. Ui bet amount disable/enable
• 3. screen from BE
• ticker to main
• refactor background of ui to before init of ui not after

